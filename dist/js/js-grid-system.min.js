!function(n){function i(n){var i=n.length;for(v=0;i>v;v++)if(n[v]>12||n[v]<1)return!1;return!0}function r(n){if(j.breakpoints.length===j.grid.length){if(i(j.grid)){var r=j.breakpoints.length-1;if(i(j.grid),n>j.breakpoints[0])a=j.grid[0],b=j.breakpoints[0];else if(n<j.breakpoints[r])a=j.grid[r],b=j.breakpoints[r];else for(v=r;v>=0;v--)n>=j.breakpoints[v]&&(a=j.grid[v],b=j.breakpoints[v]);return[a,b]}return console.error("JS grid system config error (grid contains more than 12 columns or less then 1 column)"),!1}return console.error("JS grid system config error (amount of breakpoints does not equal amount of grid)"),!1}function t(n){var i=0,r=n.length;for(v=1;r>v;v++)n[v]<n[i]&&(i=v);return i}function e(){c=[],l=0,g.find(".js-grid-item").each(function(){var i=n(this).find("img"),r=i.height(),t=i.width(),e=r*m/t;c.push([e,i.attr("src")])}),w=c.length}function o(){g.find(".js-grid-result").empty(),h=[]}function s(){for(v=0;a>v;v++)g.find(".js-grid-result").append('<div class="js-grid-column"></div>'),g.find(".js-grid-column").eq(v).append('<img src="'+c[l][1]+'" />'),h[v]=c[l][0],l++}function d(){for(;w>l;){var n=t(h);g.find(".js-grid-column").eq(n).append('<img src="'+c[l][1]+'" />'),h[n]+=c[l][0],l++}}function f(){k=r(n(window).width()),k!==!1&&(a=k[0],b=k[1],p=n(window).width(),m=p/a,e(),s(),d())}function u(){var i=b;k=r(n(window).width()),k!==!1&&(a=k[0],b=k[1],p=n(window).width(),m=p/a,i!=b&&(e(),o(),s(),d()))}var g=null,a=1,c=[],l=0,h=[],p=0,m=0,w=0,b=400,k=[],v=0,j={breakpoints:[],grid:[]};n.fn.jsSimpleGrid=function(i){return g=this,j=n.extend({breakpoints:[1280,960,800,640,400],grid:[5,4,3,2,1]},i),f(),n(window).resize(function(){u()}),this}}(jQuery);
//# sourceMappingURL=data:application/json;base64,
